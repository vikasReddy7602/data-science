{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6a7a93af",
   "metadata": {
    "papermill": {
     "duration": 0.004411,
     "end_time": "2023-03-15T13:50:11.918635",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.914224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **[YBI Foundation](https://www.ybifoundation.org/)** \n",
    "click to know more"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6361a1c6",
   "metadata": {
    "papermill": {
     "duration": 0.002928,
     "end_time": "2023-03-15T13:50:11.925143",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.922215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **openml.org is a public repository for machine learning data and experiments, that allows everybody to upload open datasets**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9dc83ae",
   "metadata": {
    "papermill": {
     "duration": 0.002838,
     "end_time": "2023-03-15T13:50:11.931158",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.928320",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Datasets are uniquely identified by either an integer ID or by a combination of name and version (i.e. there might be multiple versions of the ‘iris’ dataset). Please give either name or data_id (not both). In case a name is given, a version can also be provided.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88518eee",
   "metadata": {
    "papermill": {
     "duration": 0.002821,
     "end_time": "2023-03-15T13:50:11.937100",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.934279",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**sklearn.datasets.fetch_openml( name: Optional[str] = None, *, version: Union[str, int] = 'active', data_id: Optional[int] = None, data_home: Optional[str] = None, target_column: Optional[Union[str, List]] = 'default-target', cache: bool = True, return_X_y: bool = False, as_frame: Union[str, bool] = 'auto', n_retries: int = 3, delay: float = 1.0, parser: Optional[str] = 'warn')**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd613d13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:11.945878Z",
     "iopub.status.busy": "2023-03-15T13:50:11.945075Z",
     "iopub.status.idle": "2023-03-15T13:50:11.954745Z",
     "shell.execute_reply": "2023-03-15T13:50:11.953779Z"
    },
    "papermill": {
     "duration": 0.016991,
     "end_time": "2023-03-15T13:50:11.957202",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.940211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import library\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a7e2a98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:11.966038Z",
     "iopub.status.busy": "2023-03-15T13:50:11.965327Z",
     "iopub.status.idle": "2023-03-15T13:50:13.255536Z",
     "shell.execute_reply": "2023-03-15T13:50:13.254441Z"
    },
    "papermill": {
     "duration": 1.298007,
     "end_time": "2023-03-15T13:50:13.258608",
     "exception": false,
     "start_time": "2023-03-15T13:50:11.960601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import function\n",
    "\n",
    "from sklearn.datasets import fetch_openml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4bb7adbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:13.267320Z",
     "iopub.status.busy": "2023-03-15T13:50:13.266875Z",
     "iopub.status.idle": "2023-03-15T13:50:19.842921Z",
     "shell.execute_reply": "2023-03-15T13:50:19.841874Z"
    },
    "papermill": {
     "duration": 6.583555,
     "end_time": "2023-03-15T13:50:19.845615",
     "exception": false,
     "start_time": "2023-03-15T13:50:13.262060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fetch dataset from openml by name or dataset id\n",
    "\n",
    "df = fetch_openml(data_id=31)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "31ed524a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:19.853862Z",
     "iopub.status.busy": "2023-03-15T13:50:19.853458Z",
     "iopub.status.idle": "2023-03-15T13:50:19.858698Z",
     "shell.execute_reply": "2023-03-15T13:50:19.857215Z"
    },
    "papermill": {
     "duration": 0.012204,
     "end_time": "2023-03-15T13:50:19.861185",
     "exception": false,
     "start_time": "2023-03-15T13:50:19.848981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# regression target or classification labels\n",
    "\n",
    "y= df.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "52bc0efe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:19.869564Z",
     "iopub.status.busy": "2023-03-15T13:50:19.869112Z",
     "iopub.status.idle": "2023-03-15T13:50:19.874831Z",
     "shell.execute_reply": "2023-03-15T13:50:19.873339Z"
    },
    "papermill": {
     "duration": 0.013222,
     "end_time": "2023-03-15T13:50:19.877821",
     "exception": false,
     "start_time": "2023-03-15T13:50:19.864599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# feature matrix\n",
    "\n",
    "X= df.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e6ef50db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-03-15T13:50:19.886765Z",
     "iopub.status.busy": "2023-03-15T13:50:19.886031Z",
     "iopub.status.idle": "2023-03-15T13:50:19.947034Z",
     "shell.execute_reply": "2023-03-15T13:50:19.945723Z"
    },
    "papermill": {
     "duration": 0.069029,
     "end_time": "2023-03-15T13:50:19.950251",
     "exception": false,
     "start_time": "2023-03-15T13:50:19.881222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'data':     checking_status  duration                  credit_history  \\\n",
       " 0                <0       6.0  critical/other existing credit   \n",
       " 1          0<=X<200      48.0                   existing paid   \n",
       " 2       no checking      12.0  critical/other existing credit   \n",
       " 3                <0      42.0                   existing paid   \n",
       " 4                <0      24.0              delayed previously   \n",
       " ..              ...       ...                             ...   \n",
       " 995     no checking      12.0                   existing paid   \n",
       " 996              <0      30.0                   existing paid   \n",
       " 997     no checking      12.0                   existing paid   \n",
       " 998              <0      45.0                   existing paid   \n",
       " 999        0<=X<200      45.0  critical/other existing credit   \n",
       " \n",
       "                  purpose  credit_amount    savings_status  employment  \\\n",
       " 0               radio/tv         1169.0  no known savings         >=7   \n",
       " 1               radio/tv         5951.0              <100      1<=X<4   \n",
       " 2              education         2096.0              <100      4<=X<7   \n",
       " 3    furniture/equipment         7882.0              <100      4<=X<7   \n",
       " 4                new car         4870.0              <100      1<=X<4   \n",
       " ..                   ...            ...               ...         ...   \n",
       " 995  furniture/equipment         1736.0              <100      4<=X<7   \n",
       " 996             used car         3857.0              <100      1<=X<4   \n",
       " 997             radio/tv          804.0              <100         >=7   \n",
       " 998             radio/tv         1845.0              <100      1<=X<4   \n",
       " 999             used car         4576.0        100<=X<500  unemployed   \n",
       " \n",
       "      installment_commitment     personal_status other_parties  \\\n",
       " 0                       4.0         male single          none   \n",
       " 1                       2.0  female div/dep/mar          none   \n",
       " 2                       2.0         male single          none   \n",
       " 3                       2.0         male single     guarantor   \n",
       " 4                       3.0         male single          none   \n",
       " ..                      ...                 ...           ...   \n",
       " 995                     3.0  female div/dep/mar          none   \n",
       " 996                     4.0        male div/sep          none   \n",
       " 997                     4.0         male single          none   \n",
       " 998                     4.0         male single          none   \n",
       " 999                     3.0         male single          none   \n",
       " \n",
       "      residence_since property_magnitude   age other_payment_plans   housing  \\\n",
       " 0                4.0        real estate  67.0                none       own   \n",
       " 1                2.0        real estate  22.0                none       own   \n",
       " 2                3.0        real estate  49.0                none       own   \n",
       " 3                4.0     life insurance  45.0                none  for free   \n",
       " 4                4.0  no known property  53.0                none  for free   \n",
       " ..               ...                ...   ...                 ...       ...   \n",
       " 995              4.0        real estate  31.0                none       own   \n",
       " 996              4.0     life insurance  40.0                none       own   \n",
       " 997              4.0                car  38.0                none       own   \n",
       " 998              4.0  no known property  23.0                none  for free   \n",
       " 999              4.0                car  27.0                none       own   \n",
       " \n",
       "      existing_credits                        job  num_dependents  \\\n",
       " 0                 2.0                    skilled             1.0   \n",
       " 1                 1.0                    skilled             1.0   \n",
       " 2                 1.0         unskilled resident             2.0   \n",
       " 3                 1.0                    skilled             2.0   \n",
       " 4                 2.0                    skilled             2.0   \n",
       " ..                ...                        ...             ...   \n",
       " 995               1.0         unskilled resident             1.0   \n",
       " 996               1.0  high qualif/self emp/mgmt             1.0   \n",
       " 997               1.0                    skilled             1.0   \n",
       " 998               1.0                    skilled             1.0   \n",
       " 999               1.0                    skilled             1.0   \n",
       " \n",
       "     own_telephone foreign_worker  \n",
       " 0             yes            yes  \n",
       " 1            none            yes  \n",
       " 2            none            yes  \n",
       " 3            none            yes  \n",
       " 4            none            yes  \n",
       " ..            ...            ...  \n",
       " 995          none            yes  \n",
       " 996           yes            yes  \n",
       " 997          none            yes  \n",
       " 998           yes            yes  \n",
       " 999          none            yes  \n",
       " \n",
       " [1000 rows x 20 columns],\n",
       " 'target': 0      good\n",
       " 1       bad\n",
       " 2      good\n",
       " 3      good\n",
       " 4       bad\n",
       "        ... \n",
       " 995    good\n",
       " 996    good\n",
       " 997    good\n",
       " 998     bad\n",
       " 999    good\n",
       " Name: class, Length: 1000, dtype: category\n",
       " Categories (2, object): ['good', 'bad'],\n",
       " 'frame':     checking_status  duration                  credit_history  \\\n",
       " 0                <0       6.0  critical/other existing credit   \n",
       " 1          0<=X<200      48.0                   existing paid   \n",
       " 2       no checking      12.0  critical/other existing credit   \n",
       " 3                <0      42.0                   existing paid   \n",
       " 4                <0      24.0              delayed previously   \n",
       " ..              ...       ...                             ...   \n",
       " 995     no checking      12.0                   existing paid   \n",
       " 996              <0      30.0                   existing paid   \n",
       " 997     no checking      12.0                   existing paid   \n",
       " 998              <0      45.0                   existing paid   \n",
       " 999        0<=X<200      45.0  critical/other existing credit   \n",
       " \n",
       "                  purpose  credit_amount    savings_status  employment  \\\n",
       " 0               radio/tv         1169.0  no known savings         >=7   \n",
       " 1               radio/tv         5951.0              <100      1<=X<4   \n",
       " 2              education         2096.0              <100      4<=X<7   \n",
       " 3    furniture/equipment         7882.0              <100      4<=X<7   \n",
       " 4                new car         4870.0              <100      1<=X<4   \n",
       " ..                   ...            ...               ...         ...   \n",
       " 995  furniture/equipment         1736.0              <100      4<=X<7   \n",
       " 996             used car         3857.0              <100      1<=X<4   \n",
       " 997             radio/tv          804.0              <100         >=7   \n",
       " 998             radio/tv         1845.0              <100      1<=X<4   \n",
       " 999             used car         4576.0        100<=X<500  unemployed   \n",
       " \n",
       "      installment_commitment     personal_status other_parties  ...  \\\n",
       " 0                       4.0         male single          none  ...   \n",
       " 1                       2.0  female div/dep/mar          none  ...   \n",
       " 2                       2.0         male single          none  ...   \n",
       " 3                       2.0         male single     guarantor  ...   \n",
       " 4                       3.0         male single          none  ...   \n",
       " ..                      ...                 ...           ...  ...   \n",
       " 995                     3.0  female div/dep/mar          none  ...   \n",
       " 996                     4.0        male div/sep          none  ...   \n",
       " 997                     4.0         male single          none  ...   \n",
       " 998                     4.0         male single          none  ...   \n",
       " 999                     3.0         male single          none  ...   \n",
       " \n",
       "      property_magnitude   age  other_payment_plans   housing existing_credits  \\\n",
       " 0           real estate  67.0                 none       own              2.0   \n",
       " 1           real estate  22.0                 none       own              1.0   \n",
       " 2           real estate  49.0                 none       own              1.0   \n",
       " 3        life insurance  45.0                 none  for free              1.0   \n",
       " 4     no known property  53.0                 none  for free              2.0   \n",
       " ..                  ...   ...                  ...       ...              ...   \n",
       " 995         real estate  31.0                 none       own              1.0   \n",
       " 996      life insurance  40.0                 none       own              1.0   \n",
       " 997                 car  38.0                 none       own              1.0   \n",
       " 998   no known property  23.0                 none  for free              1.0   \n",
       " 999                 car  27.0                 none       own              1.0   \n",
       " \n",
       "                            job num_dependents  own_telephone foreign_worker  \\\n",
       " 0                      skilled            1.0            yes            yes   \n",
       " 1                      skilled            1.0           none            yes   \n",
       " 2           unskilled resident            2.0           none            yes   \n",
       " 3                      skilled            2.0           none            yes   \n",
       " 4                      skilled            2.0           none            yes   \n",
       " ..                         ...            ...            ...            ...   \n",
       " 995         unskilled resident            1.0           none            yes   \n",
       " 996  high qualif/self emp/mgmt            1.0            yes            yes   \n",
       " 997                    skilled            1.0           none            yes   \n",
       " 998                    skilled            1.0            yes            yes   \n",
       " 999                    skilled            1.0           none            yes   \n",
       " \n",
       "     class  \n",
       " 0    good  \n",
       " 1     bad  \n",
       " 2    good  \n",
       " 3    good  \n",
       " 4     bad  \n",
       " ..    ...  \n",
       " 995  good  \n",
       " 996  good  \n",
       " 997  good  \n",
       " 998   bad  \n",
       " 999  good  \n",
       " \n",
       " [1000 rows x 21 columns],\n",
       " 'categories': None,\n",
       " 'feature_names': ['checking_status',\n",
       "  'duration',\n",
       "  'credit_history',\n",
       "  'purpose',\n",
       "  'credit_amount',\n",
       "  'savings_status',\n",
       "  'employment',\n",
       "  'installment_commitment',\n",
       "  'personal_status',\n",
       "  'other_parties',\n",
       "  'residence_since',\n",
       "  'property_magnitude',\n",
       "  'age',\n",
       "  'other_payment_plans',\n",
       "  'housing',\n",
       "  'existing_credits',\n",
       "  'job',\n",
       "  'num_dependents',\n",
       "  'own_telephone',\n",
       "  'foreign_worker'],\n",
       " 'target_names': ['class'],\n",
       " 'DESCR': '**Author**: Dr. Hans Hofmann  \\n**Source**: [UCI](https://archive.ics.uci.edu/ml/datasets/statlog+(german+credit+data)) - 1994    \\n**Please cite**: [UCI](https://archive.ics.uci.edu/ml/citation_policy.html)\\n\\n**German Credit dataset**  \\nThis dataset classifies people described by a set of attributes as good or bad credit risks.\\n\\nThis dataset comes with a cost matrix: \\n``` \\nGood  Bad (predicted)  \\nGood   0    1   (actual)  \\nBad    5    0  \\n```\\n\\nIt is worse to class a customer as good when they are bad (5), than it is to class a customer as bad when they are good (1).  \\n\\n### Attribute description  \\n\\n1. Status of existing checking account, in Deutsche Mark.  \\n2. Duration in months  \\n3. Credit history (credits taken, paid back duly, delays, critical accounts)  \\n4. Purpose of the credit (car, television,...)  \\n5. Credit amount  \\n6. Status of savings account/bonds, in Deutsche Mark.  \\n7. Present employment, in number of years.  \\n8. Installment rate in percentage of disposable income  \\n9. Personal status (married, single,...) and sex  \\n10. Other debtors / guarantors  \\n11. Present residence since X years  \\n12. Property (e.g. real estate)  \\n13. Age in years  \\n14. Other installment plans (banks, stores)  \\n15. Housing (rent, own,...)  \\n16. Number of existing credits at this bank  \\n17. Job  \\n18. Number of people being liable to provide maintenance for  \\n19. Telephone (yes,no)  \\n20. Foreign worker (yes,no)\\n\\nDownloaded from openml.org.',\n",
       " 'details': {'id': '31',\n",
       "  'name': 'credit-g',\n",
       "  'version': '1',\n",
       "  'description_version': '6',\n",
       "  'format': 'ARFF',\n",
       "  'creator': 'Dr. Hans Hofmann',\n",
       "  'collection_date': '1994-11-17',\n",
       "  'upload_date': '2014-04-06T23:21:47',\n",
       "  'language': 'English',\n",
       "  'licence': 'Public',\n",
       "  'url': 'https://api.openml.org/data/v1/download/31/credit-g.arff',\n",
       "  'parquet_url': 'http://openml1.win.tue.nl/dataset31/dataset_31.pq',\n",
       "  'file_id': '31',\n",
       "  'default_target_attribute': 'class',\n",
       "  'version_label': '1',\n",
       "  'citation': 'https://archive.ics.uci.edu/ml/citation_policy.html',\n",
       "  'tag': ['credit_scoring',\n",
       "   'finance_problem',\n",
       "   'mythbusting_1',\n",
       "   'OpenML-CC18',\n",
       "   'OpenML100',\n",
       "   'study_1',\n",
       "   'study_123',\n",
       "   'study_14',\n",
       "   'study_144',\n",
       "   'study_15',\n",
       "   'study_20',\n",
       "   'study_218',\n",
       "   'study_241',\n",
       "   'study_34',\n",
       "   'study_37',\n",
       "   'study_41',\n",
       "   'study_50',\n",
       "   'study_52',\n",
       "   'study_7',\n",
       "   'study_70',\n",
       "   'study_98',\n",
       "   'study_99',\n",
       "   'uci'],\n",
       "  'visibility': 'public',\n",
       "  'original_data_url': 'https://archive.ics.uci.edu/ml/datasets/statlog+(german+credit+data)',\n",
       "  'paper_url': 'https://dl.acm.org/doi/abs/10.1145/967900.968104',\n",
       "  'minio_url': 'http://openml1.win.tue.nl/dataset31/dataset_31.pq',\n",
       "  'status': 'active',\n",
       "  'processing_date': '2020-11-20 19:44:53',\n",
       "  'md5_checksum': '9a475053fed0c26ee95cd4525e50074c'},\n",
       " 'url': 'https://www.openml.org/d/31'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# description\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d174d856",
   "metadata": {
    "papermill": {
     "duration": 0.003407,
     "end_time": "2023-03-15T13:50:19.957695",
     "exception": false,
     "start_time": "2023-03-15T13:50:19.954288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19.550255,
   "end_time": "2023-03-15T13:50:20.785504",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-03-15T13:50:01.235249",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
